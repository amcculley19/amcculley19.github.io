I"œ<h1 id="tryhackme---juice-shop">TryHackMe - Juice Shop</h1>
<hr />

<p>This is a writeup of the OWASP Juice Shop room on <a href="http://tryhackme.com">TryHackMe</a>. This room is a well-known web application used to learn the OWASP top ten web application security risks, and actually has much more to offer than just the tasks given to us in TryHackMe. For that reason, Iâ€™ll be adding onto this at the end of the writeup (and hopefully revisit it over time) in order to better my web application pen testing skills. After all, web applications are one of the most enticing ways to gain access to networks.</p>

<h2 id="enumeration">Enumeration</h2>

<p>Because this is a web application, Iâ€™m going to skip the scanning part of this room, and head straight to the web app. Hereâ€™s the home page:</p>

<p><img src="assets/images/OWASPJuiceShop/OWASPJuiceShop_Home.png" alt="" /></p>

<p>The room on THM instructs us to move around the webpage and get a feel for how it works. Iâ€™ll list some of the more interesting things I see on initial enumeration. Some of the things Iâ€™m looking for are: places that recieve user input, login pages, downloads, etc. Hereâ€™s an initial list.</p>

<ul>
  <li>Search bar at the top of the page</li>
  <li>Customer Feedback page</li>
  <li>Login page</li>
  <li>Cookie usage</li>
  <li>Recycling box request page</li>
  <li>info disclosure under the products, reveals usernames to try to break into</li>
  <li>Download on the about us page gives us possible ftp.</li>
</ul>

<p>Thatâ€™s all from the initial messing around which took about ~5-10 minutes. Iâ€™m sure that Iâ€™ll see more as I dive deeper into the box.</p>

<h2 id="injection">Injection</h2>

<p>The first task on the webpage is to successfully login to the admin account using SQL injeciton. This particular SQL injection will work by typing malicious input into the login. The web app doesnâ€™t properly sanitize the input, and reads it in such a manner that just lets us waltz right into the adminâ€™s dashboard. The only piece of info we really need, the adminâ€™s email, can be found in the apple juice product on the homepage. If we click on the product, it gives us access to the reviews. One has been submitted by <code class="language-plaintext highlighter-rouge">admin@juice-sh.op</code> so we can use that email to login.</p>

<p align="center">
  <img src="assets/images/OWASPJuiceShop/OWASPJuiceShop_admin.png" />
</p>

<p>So the final piece of the SQL injection is to add <code class="language-plaintext highlighter-rouge">'--</code> to the end of the adminâ€™s email and then we will be able to type whatever password we want and gain access to the adminâ€™s account. This is due to the input of the special characters being handled poorly. More specifically, the input is being interpreted by SQL as commenting out the password. We get a green notification at the top of the screen when we successfully login as admin.</p>

<h2 id="broken-authentication">Broken Authentication</h2>

<p>The next task is broken authentication. We are given the details of exploiting bugs in the authentication process as well as an insecure forgotten password mechanism. Weâ€™ll start with resetting Jimâ€™s password.</p>
:ET